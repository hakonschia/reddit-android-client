<resources>
    <!-- Base application theme -->
    <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>

        <item name="android:statusBarColor">#121212</item>
        <item name="android:windowContentTransitions">true</item>
        <item name="android:windowBackground">@color/background</item>

        <item name="android:textColorPrimary">@color/text_color</item>
        <item name="android:textColorSecondary">@color/secondary_text_color</item>
        <item name="android:textColorHint">@color/colorAccent</item>
        <item name="android:textColorLink">@color/link_color</item>

        <item name="materialButtonStyle">@style/ButtonStyle</item>
        <item name="snackbarStyle">@style/SnackbarStyle</item>
        <item name="snackbarTextViewStyle">@style/SnackbarTextStyle</item>
    </style>

    <!-- The launcher theme is the "default" for the App. It shows on start up (and should ONLY be
    shown at startup) and shows the App logo-->
    <style name="AppTheme.Launcher">
        <item name="android:windowBackground">@drawable/launcher</item>
    </style>

    <!-- For Slidr to work the theme has to be with a transparent background (or else the activity
    being shown when swiping won't be shown, it will be the color of the background) -->
    <style name="AppTheme.SlidrActivityTheme">
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowBackground">@android:color/transparent</item>
    </style>

    <!-- The theme for the DispatcherActivity. This theme is basically just making the activity
    invisible, as that activity in itself should never be visible as it's a middle man activity-->
    <style name="AppTheme.DispatcherTheme">
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowAnimationStyle">@null</item>
    </style>

    <style name="ButtonStyle" parent="Widget.MaterialComponents.Button">
        <item name="backgroundTint">@color/buttonBackground</item>
        <item name="android:textColor">@color/buttonTextColor</item>

        <!-- Remove the inner padding of the buttons -->
        <item name="android:insetTop">0dp</item>
        <item name="android:insetBottom">0dp</item>
    </style>

    <style name="ButtonStyleSmall" parent="Widget.MaterialComponents.Button">
        <item name="backgroundTint">@color/buttonBackground</item>
        <item name="android:textColor">@color/buttonTextColor</item>

        <item name="android:paddingStart">@dimen/buttonPadding</item>
        <item name="android:paddingEnd">@dimen/buttonPadding</item>
        <item name="android:paddingTop">@dimen/buttonPadding</item>
        <item name="android:paddingBottom">@dimen/buttonPadding</item>
    </style>

    <style name="TextInputStyle" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox">
        <item name="boxStrokeWidth">0dp</item>
        <item name="boxStrokeColor">@color/colorAccent</item>
        <item name="boxBackgroundColor">@color/text_input_background</item>
        <item name="boxCornerRadiusTopStart">@dimen/buttonCornerRadius</item>
        <item name="boxCornerRadiusTopEnd">@dimen/buttonCornerRadius</item>
        <item name="boxCornerRadiusBottomStart">@dimen/buttonCornerRadius</item>
        <item name="boxCornerRadiusBottomEnd">@dimen/buttonCornerRadius</item>

        <item name="android:textColorHint">@color/colorAccent</item>

        <!-- I want the hint ideally, but it has a background and I'm not sure how to set the
          background of the label so it doesn't look weird against the background color of the input layout
          Like this: https://github.com/material-components/material-components-android/pull/1660 -->
        <item name="hintEnabled">false</item>
    </style>

    <style name="SnackbarStyle" parent="Widget.MaterialComponents.Snackbar">
        <item name="backgroundTint">@color/secondary_background</item>
    </style>
    <style name="SnackbarTextStyle" parent="Widget.MaterialComponents.Snackbar.TextView">
        <item name="android:textColor">@color/text_color</item>
    </style>

    <style name="Widget.MPM.Menu.Dark.CustomBackground">
        <item name="android:colorBackground">@color/dialogBackground</item>
        <item name="mpm_primaryTextColor">@color/text_color</item>
        <item name="mpm_secondaryTextColor">@color/secondary_text_color</item>
        <item name="mpm_activeIconColor">@color/iconColor</item>
        <item name="mpm_separatorColor">@color/divider</item>
    </style>

    <!-- Ideally I could just have the background that the other toolbar items have (semi-transparent)
     to make the text readable on all banner backgrounds, but setting android:background here doesn't work -->
    <style name="ToolbarTitle">
        <item name="android:textSize">25sp</item>
        <item name="android:shadowDy">0</item>
        <item name="android:shadowDx">0</item>
        <item name="android:shadowRadius">8</item>
        <item name="android:shadowColor">@color/blackOrWhite</item>
    </style>
</resources>